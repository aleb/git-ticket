#compdef _git-ticket git-ticket


function _git-ticket {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Create a new ticket."
      "assign:Assign a user to a ticket."
      "commands:Display available commands."
      "comment:Display or add comments to a ticket."
      "deselect:Clear the implicitly selected ticket."
      "label:Display, add or remove labels to/from a ticket."
      "ls:List tickets."
      "ls-id:List ticket identifiers."
      "ls-label:List valid labels."
      "pull:Pull tickets update from a git remote."
      "push:Push tickets update to a git remote."
      "review:Review a ticket."
      "select:Select a ticket for implicit use in future commands."
      "show:Display the details of a ticket."
      "status:Display or change a ticket status."
      "termui:Launch the terminal UI."
      "title:Display or change a title of a ticket."
      "user:Display or change the user identity."
      "version:Show git-ticket version information."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _git-ticket_add
    ;;
  assign)
    _git-ticket_assign
    ;;
  commands)
    _git-ticket_commands
    ;;
  comment)
    _git-ticket_comment
    ;;
  deselect)
    _git-ticket_deselect
    ;;
  label)
    _git-ticket_label
    ;;
  ls)
    _git-ticket_ls
    ;;
  ls-id)
    _git-ticket_ls-id
    ;;
  ls-label)
    _git-ticket_ls-label
    ;;
  pull)
    _git-ticket_pull
    ;;
  push)
    _git-ticket_push
    ;;
  review)
    _git-ticket_review
    ;;
  select)
    _git-ticket_select
    ;;
  show)
    _git-ticket_show
    ;;
  status)
    _git-ticket_status
    ;;
  termui)
    _git-ticket_termui
    ;;
  title)
    _git-ticket_title
    ;;
  user)
    _git-ticket_user
    ;;
  version)
    _git-ticket_version
    ;;
  esac
}

function _git-ticket_add {
  _arguments \
    '(-t --title)'{-t,--title}'[Provide a title to describe the issue]:' \
    '(-m --message)'{-m,--message}'[Provide a message to describe the issue]:' \
    '(-F --file)'{-F,--file}'[Take the message from the given file. Use - to read the message from the standard input]:'
}

function _git-ticket_assign {
  _arguments
}

function _git-ticket_commands {
  _arguments \
    '(-p --pretty)'{-p,--pretty}'[Output the command description as well as Markdown compatible comment]'
}


function _git-ticket_comment {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Add a new comment to a ticket."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _git-ticket_comment_add
    ;;
  esac
}

function _git-ticket_comment_add {
  _arguments \
    '(-F --file)'{-F,--file}'[Take the message from the given file. Use - to read the message from the standard input]:' \
    '(-m --message)'{-m,--message}'[Provide the new message from the command line]:'
}

function _git-ticket_deselect {
  _arguments
}


function _git-ticket_label {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Add a label to a ticket."
      "rm:Remove a label from a ticket."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _git-ticket_label_add
    ;;
  rm)
    _git-ticket_label_rm
    ;;
  esac
}

function _git-ticket_label_add {
  _arguments
}

function _git-ticket_label_rm {
  _arguments
}

function _git-ticket_ls {
  _arguments \
    '(*-s *--status)'{\*-s,\*--status}'[Filter by status. Valid values are [open,closed]]:' \
    '(*-a *--author)'{\*-a,\*--author}'[Filter by author]:' \
    '(*-p *--participant)'{\*-p,\*--participant}'[Filter by participant]:' \
    '(*-A *--actor)'{\*-A,\*--actor}'[Filter by actor]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Filter by label]:' \
    '(*-t *--title)'{\*-t,\*--title}'[Filter by title]:' \
    '(*-n *--no)'{\*-n,\*--no}'[Filter by absence of something. Valid values are [label]]:' \
    '(-b --by)'{-b,--by}'[Sort the results by a characteristic. Valid values are [id,creation,edit]]:' \
    '(-d --direction)'{-d,--direction}'[Select the sorting direction. Valid values are [asc,desc]]:'
}

function _git-ticket_ls-id {
  _arguments
}

function _git-ticket_ls-label {
  _arguments
}

function _git-ticket_pull {
  _arguments
}

function _git-ticket_push {
  _arguments
}


function _git-ticket_review {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "fetch:Fetch review data for a ticket."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  fetch)
    _git-ticket_review_fetch
    ;;
  esac
}

function _git-ticket_review_fetch {
  _arguments
}

function _git-ticket_select {
  _arguments
}

function _git-ticket_show {
  _arguments \
    '(-f --field)'{-f,--field}'[Select field to display. Valid values are [assignee,author,authorEmail,checklists,createTime,humanId,id,labels,reviews,shortId,status,title,workflow,actors,participants]]:'
}


function _git-ticket_status {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "accepted:Ticket is set ACCEPTED."
      "done:Ticket is set DONE."
      "inprogress:Ticket is set IN PROGRESS."
      "inreview:Ticket is set IN REVIEW."
      "merged:Ticket is set MERGED."
      "proposed:Ticket is set PROPOSED."
      "reviewed:Ticket is set REVIEWED."
      "vetted:Ticket is set VETTED."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  accepted)
    _git-ticket_status_accepted
    ;;
  done)
    _git-ticket_status_done
    ;;
  inprogress)
    _git-ticket_status_inprogress
    ;;
  inreview)
    _git-ticket_status_inreview
    ;;
  merged)
    _git-ticket_status_merged
    ;;
  proposed)
    _git-ticket_status_proposed
    ;;
  reviewed)
    _git-ticket_status_reviewed
    ;;
  vetted)
    _git-ticket_status_vetted
    ;;
  esac
}

function _git-ticket_status_accepted {
  _arguments
}

function _git-ticket_status_done {
  _arguments
}

function _git-ticket_status_inprogress {
  _arguments
}

function _git-ticket_status_inreview {
  _arguments
}

function _git-ticket_status_merged {
  _arguments
}

function _git-ticket_status_proposed {
  _arguments
}

function _git-ticket_status_reviewed {
  _arguments
}

function _git-ticket_status_vetted {
  _arguments
}

function _git-ticket_termui {
  _arguments
}


function _git-ticket_title {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "edit:Edit a title of a ticket."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  edit)
    _git-ticket_title_edit
    ;;
  esac
}

function _git-ticket_title_edit {
  _arguments \
    '(-t --title)'{-t,--title}'[Provide a title to describe the issue]:'
}


function _git-ticket_user {
  local -a commands

  _arguments -C \
    '(-f --field)'{-f,--field}'[Select field to display. Valid values are [email,humanId,id,lastModification,lastModificationLamport,login,metadata,name]]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "adopt:Adopt an existing identity as your own."
      "create:Create a new identity."
      "key:Display, add or remove keys to/from a user."
      "ls:List identities."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  adopt)
    _git-ticket_user_adopt
    ;;
  create)
    _git-ticket_user_create
    ;;
  key)
    _git-ticket_user_key
    ;;
  ls)
    _git-ticket_user_ls
    ;;
  esac
}

function _git-ticket_user_adopt {
  _arguments
}

function _git-ticket_user_create {
  _arguments
}


function _git-ticket_user_key {
  local -a commands

  _arguments -C \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Add a PGP key from a user."
      "rm:Remove a PGP key from the adopted or the specified user."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _git-ticket_user_key_add
    ;;
  rm)
    _git-ticket_user_key_rm
    ;;
  esac
}

function _git-ticket_user_key_add {
  _arguments \
    '(-F --file)'{-F,--file}'[Take the armored PGP public key from the given file. Use - to read the message from the standard input]:' \
    '(-k --key)'{-k,--key}'[Provide the armored PGP public key from the command line]:'
}

function _git-ticket_user_key_rm {
  _arguments
}

function _git-ticket_user_ls {
  _arguments
}

function _git-ticket_version {
  _arguments \
    '(-n --number)'{-n,--number}'[Only show the version number]' \
    '(-c --commit)'{-c,--commit}'[Only show the commit hash]' \
    '(-a --all)'{-a,--all}'[Show all version informations]'
}

